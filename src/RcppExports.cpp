// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// spatial_hetero_perm
List spatial_hetero_perm(const arma::mat& x, const arma::mat& uv, int poly, int resample, double bw, int kernel);
RcppExport SEXP _hgwrr_spatial_hetero_perm(SEXP xSEXP, SEXP uvSEXP, SEXP polySEXP, SEXP resampleSEXP, SEXP bwSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type uv(uvSEXP);
    Rcpp::traits::input_parameter< int >::type poly(polySEXP);
    Rcpp::traits::input_parameter< int >::type resample(resampleSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< int >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(spatial_hetero_perm(x, uv, poly, resample, bw, kernel));
    return rcpp_result_gen;
END_RCPP
}
// hgwr_bfml
List hgwr_bfml(const arma::mat& g, const arma::mat& x, const arma::mat& z, const arma::vec& y, const arma::mat& u, const arma::vec& group, double bw, size_t kernel, double alpha, double eps_iter, double eps_gradient, size_t max_iters, size_t max_retries, size_t ml_type, size_t verbose);
RcppExport SEXP _hgwrr_hgwr_bfml(SEXP gSEXP, SEXP xSEXP, SEXP zSEXP, SEXP ySEXP, SEXP uSEXP, SEXP groupSEXP, SEXP bwSEXP, SEXP kernelSEXP, SEXP alphaSEXP, SEXP eps_iterSEXP, SEXP eps_gradientSEXP, SEXP max_itersSEXP, SEXP max_retriesSEXP, SEXP ml_typeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type g(gSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type group(groupSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< size_t >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type eps_iter(eps_iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps_gradient(eps_gradientSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_iters(max_itersSEXP);
    Rcpp::traits::input_parameter< size_t >::type max_retries(max_retriesSEXP);
    Rcpp::traits::input_parameter< size_t >::type ml_type(ml_typeSEXP);
    Rcpp::traits::input_parameter< size_t >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(hgwr_bfml(g, x, z, y, u, group, bw, kernel, alpha, eps_iter, eps_gradient, max_iters, max_retries, ml_type, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hgwrr_spatial_hetero_perm", (DL_FUNC) &_hgwrr_spatial_hetero_perm, 6},
    {"_hgwrr_hgwr_bfml", (DL_FUNC) &_hgwrr_hgwr_bfml, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_hgwrr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
